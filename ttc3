#!/usr/bin/python3
#
# ttc - 'tiny target control' - a tool for building source and
# manipulating a target from a host
# Don't let anyone tell you that 'ttc' stands for "Tim's Target Control"
# It's just not true.
#
# Copyright 2018 Sony Corporation
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of version 2 of the GNU General Public License as
#   published by the Free Software Foundation.  The GNU General Public
#   License is available online at: http://www.gnu.org/copyleft/gpl.html
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
# Author: Tim Bird  <tim.bird (at) sony.com>
#
# To Do:
#  * should support INSTALL_MOD_PATH
#
# CHANGELOG:
#  1.5.4  - stop processing args after 'run' command is detected
#  1.5.3  - fix bug with ttc run and quoting
#  1.5.2  - allow quotes around single-line values
#  1.5.1  - fix bug when no config files found
#  1.5.0  - change 'ttc run' to perform an exec
#  1.4.4  - add support for ~/.config/ttc.conf, and change config file handling
#           so that /etc/ttc.conf is optional
#  1.4.3  - add mbuild and minstall
#  1.4.2  - add command status to do 'status' command
#  1.4.1  - add power status and network status to 'status' command
#  1.4.0  - pass multiple args to run command (everything following 'run' in
#           command line).  Also, remove trailing whitespace from some lines.
#  1.3.4  - support leading '-r' in copy commands, and pass it to
#           sub-command in 'copy_args' environment variable
#  1.3.3  - add -c command, support TTC_SYSLOG, handle missing /dev/log
#  1.3.2  - allow whitespace preceding comment char: #
#  1.3.1  - change author e-mail to sonymobile.com
#  1.3.0  - 2013-01-22 add on, off, pos, fsbuild commands
#  1.2.3  - add error handling for macro expansions
#  1.2.2  - add ADBHOST to list of environment variables set on setenv
#  1.2.1  - 2011-06-16 flush stdout after ttc run, to avoid a python exception
#           when output is piped to a command which terminates.
#           e.g. ttc run dmesg | head
#  1.2.0  - ??
#  1.1.0  - 2011-04-18 support multi-line shell fragments in exec_command
#  1.0.1  - 2011-01-11 fix bug handling single-line triple-quoted blocks
#  1.0.0  - 2008-10-24 rename LOCAL_TTC_CONF to TTC_CONF and support multiple
#           config files
#  0.9.22 - 2008-10-23 rename to ttc
#  0.9.12 - 2008-08-13 Remove spurious prints from set_config
#  0.9.11 - 2008-06-19 Escape spaces in exported env vars for "setenv -o"
#           This is needed to handle CROSS_COMPILE=ccache arm-linux-
#  0.9.10 - 2008-06-05 Fix macro expansion to ignore non-interpolation percents: %PTR%
#  0.9.9 - 2008-06-03 Expand nested macros
#  0.9.8 - 2008-05-21 Support expansion macros in attributes
#          Also, support multi-value and multi-level inheritance
#          Support hidden config blocks (starting with a dot)
#  0.9.7 - 2008-05-12 Support inheritance using the inherit_from attribute

import os, sys, string, re
import subprocess
import shutil

# MAJOR, MINOR, REVISION
VERSION = (1,5,4)
# NOTE: make sure to change ttc-dist.sh to match

# lockdir is the place where reservation files are kept
lockdir = "/tmp/ttc-reservations"
rfile_fmt = "%s/%s.res"

quiet = 0
verbose = 0

# keep configuration file in /etc
system_config_dir = "/etc"
user_config_dir = os.path.expanduser("~/.config")
CONFIG_FILE = "ttc.conf"

# This is the name of the environment variable
# used to keep track of the current target
TARGET_ENV_VAR="TTC_TARGET"

# specify local configuration file via an environment variable
LOCAL_CONF_ENV_VAR="TTC_CONF"

# specify logging variable
LOG_ENV_VAR="TTC_SYSLOG"

# format for command_help mapping with: key=name, value=(summary, long description)
# if
command_help = {
"cp":("Copy files to or from the target.",
"""Usage: ttc [<target>] cp <src> [<src2> ...] <dest>
  The last file specified determines the direction of the copy.
  Use the prefix "target:" to specify a filepath
  on the target.  "target_bin:" can be used to put a file on the target
  in a directory on the PATH."""),

"console":("Run a program to view the target console.", ""),

"list":("Show a list of available targets.",
"""Usage: ttc [-q]
  Prints target board names with their aliases and 'real_board'
  attributes, if any.

  Use -q for "quiet" mode.  This prints only the board names, with no
  additional information. This is suitable for piping to other commands."""),

"info":("Show information about a target.",
"""Usage: ttc [<target>] info [-v] [-n <attr>]
  Show information about a target.  The '-v' (verbose) option will show all the
  attributes for the target (from the configuration file).  Use the '-n' option
  to display the value of a single attribute, <attr>."""),

"release":("Release a reservation of a target.",
"""Usage: ttc [<target>] release [-f]
  This releases (terminates) the current reservation for a target.
  If you don't currently have the reservation, an error will be shown.
  Use '-f' to force releasing the reservation of another user."""),

"reserve":("Reserve a target for use.",
"""Usage: ttc [<target>] reserve [-f]
  Reserve a target for use indefinitely.  This puts a lock file in place
  to advise other users that you are using the board.  Use 'ttc release'
  to remove the reservation.  If '-f' (force) is specified, then
  release any prior reservation."""),

#"reserve":("Reserve a target for use (now or in the future) (not implemented yet)",
#"""Usage: ttc [<target>] reserve [<duration>[m|h|d]] [-s <start-time>]
#  If duration is omitted, the target is reserved indefinitely.
#  if start-time is omitted, starting time is now.
#  Use a duration of 0 to cancel a reservation.
#"""),

"status":("Show status of target, including reservations. (not implemented yet)",""),

"setenv":("Prepare environment for building for target.",
"""Usage: ttc [<target>] setenv [-o >file]
  -o causes the environment to be output as a series of shell
  export statements, suitable to being sourced in the current shell.
  (e.g. ttc setenv -o >foo ; source foo)
  Normally, a new sub-shell is started.  When -o is used, no new
  sub-shell is started."""),

"login":("Run a program to perform a network login on the target.",""),

"help":("Show this online help.",
"""Usage: ttc help [<command>]
  If a command is specified, show the usage information for that command."""),

"version":("Show version information and exit.",""),

"get_kernel":("Install kernel sources for target in the $KERNEL_SRC directory",
"""Usage: ttc [<target>] get_kernel [-o <outputdir>]
  Use -o to specify a specific output kernel source directory.
  (default is 'linux')"""),

"get_config":("Install kernel config for target in the $KBUILD_OUTPUT directory",
"""Usage: ttc [<target>] get_config [-o <outputdir>]
  Use -o to specify an alternate KBUILD_OUTPUT directory (default is '.')"""),

"set_config":("Set one or more individual config options",
"""Usage: ttc [<target>] set_config [-o <outputdir>] <option-def> ...

  Use -o to specify an alternate KBUILD_OUTPUT directory. (The default is '.'
  if none is specified in the ttc.conf file.)

  Multiple <option-defs> may be specified with one command.  Each
  <option-def> has the syntax: <option-name><operation><value>.i
  Operations are: '=' for assignment, and '+=' for a string append.
  Boolean or tristate values should be one of "y", "n", and "n".
  String values must be enclosed in quotes, which usually requires shell
  escaping of the quote characters (see below).

  A backup is made of the .config file.

  Ex. ttc set_config CONFIG_FOO=y
      ttc set_config CONFIG_BAR=n CONFIG_BAZ=1234
      ttc set_config "CONFIG_STR=\\"foo bar\\""
      ttc set_config "CONFIG_STR+=\\" quiet\\""
"""),

"kbuild":("Build kernel from source.",
"""Usage: ttc [<target>] kbuild"""),

"kinstall":("Install kernel for use on target.",
"""Usage: ttc [<target>] kinstall"""),

"mbuild":("Build kernel modules from source.",
"""Usage: ttc [<target>] mbuild"""),

"minstall":("Install kernel modules for use on target.",
"""Usage: ttc [<target>] minstall"""),

"fsbuild":("Build root filesystem for use on target.",
"""Usage: ttc [<target>] fsbuild"""),

"fsinstall":("Install root filesystem for use on target.",
"""Usage: ttc [<target>] fsinstall"""),

"on":("Turn on target board.",
"""Usage: ttc [<target>] on"""),

"off":("Turn off target board.",
"""Usage: ttc [<target>] off"""),

"pos":("Show power status of target board.",
"""Usage: ttc [<target>] pos"""),

"reset":("Reset target board.",
"""Usage: ttc [<target>] reset [-w]
Use -w to have ttc wait a period of time before returning,
to allow the board to reset."""),

"reboot":("Reboot target board.",
"""Usage: ttc [<target>] reboot [-w]
Use -w to have ttc wait a period of time before returning,
to allow the board to reboot."""),

"rm":("Remove files from the target.",
"""Usage: ttc [<target>] rm <file1> [<file2> ...]"""),

"run":("Run a command on the target.",
"""Usage: ttc [<target>] run "command <args>" """),

"wait_for":("Wait for a condition to be true.",
"""Usage: ttc [<target>] wait_for [-i <interval>] [-t <timeout>] <command>
 The command is run periodically until it returns 0.  By default,
 the interval between executing the command is 5 seconds.
 Use -i to specify a different interval, and -t to specify a
 maximum time to wait.  Both are expressed in seconds.

   ex: ttc wait_for -i 2 -t 100 "test -f /tmp/outfile"

 This will check every two seconds to see if /tmp/outfile exists,
 waiting no longer than 100 seconds total. The exit code from
 'ttc' is the exit code of the last invocation of the
 command (0 on success)."""),

"vars":("Information about environment vars used by 'ttc'",
"""Target uses the following environment variables, if present:
TOOL_PATH, ARCH, CROSS_COMPILE, KBUILD_OUTPUT, TMPDIR, BUILDDIR,
%s, %s, %s
See the code for the meaning and usage of each of these variables.
(See do_setenv() for the complete list)

The order of reading configuration values is:
 1. read the global config file (%s)
 2. read the user config file (%s)
 3. read a local config file (if specified by %s)
 4. read environment variables

Values specified in the local config file override values in the global config
file, and values in the environment override values in either config file.
""" % (TARGET_ENV_VAR, LOCAL_CONF_ENV_VAR, LOG_ENV_VAR,
       system_config_dir+"/"+CONFIG_FILE,
       user_config_dir+"/"+CONFIG_FILE,
       LOCAL_CONF_ENV_VAR )),

}


def usage(rcode, options=[]):
    command = ""
    if len(options):
        command = options[0]

    # check if command is legal
    if command and command not in list(command_help.keys()):
        print("Unknown command: %s" % command)
        command = ""
        # drop through to showing list of commands

    if not command:
        # show list of commands
        print("""Usage: ttc [global_options] [<target>] command [options]

where <target> is the name of a target connected to this host.
If <target> is omitted, then the current target is assumed
(the one specified in the %s environment variable).

Here are the available global options:
 -h, --help	Show this usage help
 -v             Be verbose
 -q             Be quiet
 -c             Use internal command (not 'system') to execute shell commands

command is one of:
""" % (TARGET_ENV_VAR))
        command_list = list(command_help.keys())
        command_list.sort()
        for command in command_list:
            print("  %10s %s" % (command, command_help[command][0]))
    else:
        # print help for individual command
        print("ttc %s: %s" % (command, command_help[command][0]))
        print()
        print(command_help[command][1])

    sys.exit(rcode)

def print_error(message):
    sys.stderr.write("Error: "+message+"\n")
    sys.stderr.flush()

def error_out(message, rcode):
    print_error(message)
    sys.exit(rcode)

# conf file syntax
# map of maps, with target attributes in subsidiary map
# key for top level map is target name

# ttc configuration (ttc.conf) file syntax:
# ------------------------
# empty lines and lines starting with # are ignored
# target blocks begin with "target=<name>" and end when the
#   next target block is encountered.
# single-line attributes are:
# name=value
# multi-line attributes are:
# name="""value line 1
# value line 2, etc."""

def read_config(config_path, optional=True):
    # look in configuration directory
    info_file = os.path.basename(config_path)
    try:
        fl = open(config_path)
    except:
        if optional:
            return {}
        else:
            error_out("Cannot open configuration file %s" % config_path, 3)

    targets = {}
    target = "not found"
    in_block = 0
    block = ""
    line_no = 0
    for line in fl.readlines():
        line_no += 1
        if line.lstrip().startswith("#"):
            continue
        if in_block:
            # try to find end of block
            if line.rstrip().endswith('"""'):
                # remove quotes and end block
                line = line.rstrip()
                block += line[:-3] + "\n"
                targets[target][name]= block
                in_block = 0
                continue
            else:
                block += line
                continue

        # 'target=' inside a block will be confusing to the user
        # but this code (above) ignores it
        # if we're outside a block, look for the start of a new target
        if line.startswith("target="):
            target = line.split("=")[1].strip()
            # start a new target map
            if target in targets:
                print_error("redefining target '%s' in configuration file %s" % (target, config_path))
            targets[target]={}
            targets[target]["target"] = target
            continue

        # OK, it's not a target, comment or middle of a block.
        # check if it's empty
        if not line.strip():
            continue

        # line better have an equals in it
        # (either single line name=value, or multi-line block start)
        if line.find("=")==-1:
            print_error("Syntax error in target info file %s: Expected '=' at line %d:\n%s" % (info_file, line_no, line))
            continue

        (name, value) = line.split('=', 1)
        name = name.strip()
        value = value.strip()
        if value.find('"""')==-1:
            # this is a single-line, just record the attribute
            if value.startswith('"') and value.endswith('"'):
                value = value[1:-1]
            targets[target][name] = value
        else:
            # this is the start of a multi-line block
            vstart = value.find('"""')
            block = value[vstart+3:] + '\n'
            in_block = 1
            # sanity check for block terminator on same line
            # if triple-quotes end this line, then block begins
            # and ends on the same line.
            if block.endswith('"""\n'):
                block = block[:-3]
                targets[target][name] = block
                in_block = 0


    # check to see if any attributes are "homeless"
    if "not found" in targets:
        print_error("Some attributes found outside of target blocks in file %s" % info_file)

    if not targets:
        print_error("No targets were found in file %s" % info_file)

    #print "targets=", targets
    return targets

def do_list(targets):
    global quiet, verbose

    target_list = list(targets.keys())
    target_list.sort()
    if quiet:
        prefix = ""
    else:
        print("Targets on this host:")
        prefix = "    "
    for target in target_list:
        # omit hidden config blocks
        if target.startswith('.'):
            continue
        talias = ''
        if not quiet and "target_alias" in targets[target]:
            talias = " (alias %s)" % targets[target]["target_alias"]

        treal = ''
        if not quiet and "real_board" in targets[target]:
            treal = " (real %s)" % targets[target]["real_board"]

        print("%s%s%s%s" % (prefix, target, talias, treal))
    sys.exit(0)

def do_info(tmap, options):
    global verbose

    attrs = list(tmap.keys())
    attrs.sort()
    target_name = tmap["target"]

    # print a single data item, if requested
    if '-n' in options:
        attr = options[options.index('-n')+1]
        options.remove('-n')
        options.remove(attr)
        try:
            value = tmap[attr]
        except:
            print_error("target '%s' has no attributed '%s'." % (target_name, attr))
            sys.exit(1)
        print(value)
        return

    print("Information for target: %s\n" % target_name)
    attrs.remove("target")

    if "description" in tmap:
        desc = tmap["description"]
        print(desc)
        attrs.remove("description")

    if not verbose:
        # just print description, nothing more
        return

    for attr in attrs:
        value = tmap[attr]
        if value.find('\n')==-1:
            # print single-line value
            print("%15s : %s" % (attr, tmap[attr]))
        else:
            # print multi-line value
            lines = value.split('\n')
            print("%15s : %s" % (attr, lines[0]))
            # subsequent lines are indented
            for line in lines[1:]:
                print(" "*18 + line)

def exec_command(tmap, command, use_system=1):
    global verbose
    global quiet
    global use_statusoutput

    cmd_block = ""
    try:
        cmd_block = tmap[command+"_cmd"]
    except:
        pass

    if not cmd_block:
        print_error('%s_cmd not configured for target %s' % (command, tmap["target"]))

    # cmd can be a single line, or a list of commands to run
    # lines can be continued with a trailing \
    cmds = cmd_block.split('\n')
    full_cmd = ""
    for cmd in cmds:
        if verbose:
            print("cmd=", cmd)
        cmd = cmd.strip()
        if not cmd:
            continue
        full_cmd += cmd
        if full_cmd.endswith("\\"):
            full_cmd += '\n'
            continue

        if verbose:
            print("full_cmd={{{",full_cmd)
            print("}}}")

        saved_cmd = full_cmd
        # execute full_cmd
        if use_system and not use_statusoutput:
            rcode = os.system(full_cmd)
            full_cmd = ""
            result = ""
        else:
            (rcode, result) = subprocess.getstatusoutput(full_cmd)
            full_cmd = ""
        if not quiet:
            if verbose:
                sys.stdout.write("result=")
            sys.stdout.write(result)
            try:
                sys.stdout.flush()
            except:
                pass
        if rcode:
            print_error('Bad result %d, running "%s": (output follows)' % (rcode, saved_cmd))
            print_error(result)
            sys.exit(2)

    if full_cmd:
        print_error('Error - trailing slash on last non-empty line of %s_cmd\nCommand was NOT executed.' % command)
        sys.exit(3)

# cmd can be a single line, or a list of commands to run
# NOTE: this does not support line continuation.
# The last line of the command block will be fork and exec'ed.
# For all but the last command, use getstatusoutput.
# This code assumes all but the last command run quickly.
def do_run(tmap, options):
    global verbose
    global quiet
    import shlex

    cmd_to_run = " ".join(options)
    # um, we just lost all quoting

    os.environ["COMMAND"] = cmd_to_run

    cmd_block = ""
    try:
        cmd_block = tmap["run_cmd"]
    except:
        pass

    if not cmd_block:
        print_error('run_cmd not configured for target %s' % (tmap["target"]))

    # cmd can be a single line, or a list of commands to run
    cmds = cmd_block.split('\n')
    last_cmd = cmds[-1]
    for cmd in cmds[:-1]:
        if verbose:
            print("cmd='%s'" % cmd)
        cmd = cmd.strip()
        if not cmd:
            continue

        # execute cmd
        (rcode, result) = subprocess.getstatusoutput(cmd)
        if not quiet:
            if verbose:
                sys.stdout.write("result=")
            sys.stdout.write(result)
            try:
                sys.stdout.flush()
                sys.stderr.flush()
            except:
                pass
        if rcode:
            print_error('Bad result %d, running "%s": (output follows)' % (rcode, cmd))
            print_error(result)
            sys.exit(rcode)

    if verbose:
        print("cmd='%s'" % last_cmd)

    exec_args = shlex.split(last_cmd)
    # NOTE: shlex.split removes the quotes around "$COMMAND", if present

    # copy args and check for substitution one-by-one
    new_exec_args = []
    for arg in exec_args:
        if "$COMMAND" in arg:
            if '"$COMMAND"' in last_cmd:
                # if $COMMAND was quoted, then keep as one arg
                # this is another band-aid on this tough problem
                new_exec_args.append(cmd_to_run)
            else:
                # otherwise, add as separate args
                new_exec_args.extend(options)
        else:
            new_exec_args.append(arg)
    exec_args = new_exec_args

    # make sure nothing is left in python file buffers
    try:
        sys.stdout.flush()
        sys.stderr.flush()
    except IOError:
        pass
    os.execvp(exec_args[0], exec_args)

# returns one of: 'UKNOWN', 'ON', 'OFF'
def power_status(tmap):
        pos_str = "UNKNOWN"
        if 'pos_cmd' in tmap:
            (rcode, result) = subprocess.getstatusoutput( \
                    "ttc %s pos" % tmap["target"])
            m = re.search(r"\b(off|on)\b", result, re.IGNORECASE)
            if m:
                pos_str = m.groups()[0].upper()

        return pos_str

# returns one of: 'RESPONSIVE', 'NONRESPONSIVE'
def network_status(tmap):
        rcode, result = subprocess.getstatusoutput( \
                "ping -c 5 -i 0.3 -W 1 %s" % tmap["ip_addr"])

        if rcode==0:
            return "RESPONSIVE"
        else:
            return "NONRESPONSIVE"

# returns one of: 'OPERATIVE', 'INOPERATIVE'
def command_status(tmap):
        rcode, result = subprocess.getstatusoutput( \
                'ttc %s run echo \"hello response\"' % tmap["target"])

        m = re.search(r"hello response", result)
        if m:
            return "OPERATIVE"
        else:
            return "INOPERATIVE"

def do_status(tmap):
    target = tmap["target"]

    print("Status for target: %s" % target)

    power_str = power_status(tmap)
    print("Power to board is: %s" % power_str)

    # is target pingable? (network is active?)
    net_str = network_status(tmap)
    print("Network status is: %s" % net_str)

    cmd_str = command_status(tmap)
    print("Command status is: %s" % cmd_str)

    # show who is currently using target
    res = get_reservation(tmap)
    if res[0]:
        print("User %s currently has '%s' reserved." % (res[0], target))
        print("Reservation began at: %s" % res[1])
    else:
        print("Target board is not reserved.")

    # FIXTHIS - should report:
    #    future reservations for target?

# set the vars from tmap into the current environment
# if options list has "-o", output the env as a list of shell export statements
# if options list has "-s", start a sub-shell
#
# variable precedence:
#   value from 'target' command line = highest precedence
#   value from pre-existing environment = medium precedence
#   value from target.conf file = lowest precendence
#
# This means that effectively, target commands don't "nest" if
# a different target is specified.  This is because the target.conf
# values for a new target would not override the values in the
# sub-shell environment of the first target.
# (i.e. bad things will happen if you do: "target setenv osk", then
#   "target ebony getkernel ; make $kimage" )
#
# FIXTHIS - should check for pre-existing TTC_TARGET variable and warn user
#
def do_setenv(tmap, options=[]):
    if "-s" in options:
        print("Setting environment for target: %s" % tmap["target"])

    # set target name in new shell environment
    os.environ[TARGET_ENV_VAR] = tmap["target"]

    # copy certain environment vars for the new shell
    env_list = ["ARCH", "CROSS_COMPILE", "kimage", "INSTALL_PATH",
        "INSTALL_MOD_PATH", "ADBHOST", "BUILDDIR",
        "KERNEL_SRC", "KBUILD_OUTPUT", "SSHPASS",
        "TOOL_PATH", "TMPDIR"]

    for var in env_list:
        if var in tmap and tmap[var] and var not in os.environ:
            os.environ[var]=tmap[var]

    # add TMPDIR if not already present
    if "TMPDIR" not in os.environ:
        os.environ["TMPDIR"] = "/tmp"

    # if TOOL_PATH is present, add it to regular PATH, if not already there
    if "TOOL_PATH" in tmap:
        tool_path = tmap["TOOL_PATH"]
        PATH = os.environ["PATH"].split(":")
        for tool_path_item in tool_path.split(":"):
            if tool_path_item not in PATH:
                PATH.append(tool_path_item)
        os.environ["PATH"] = string.join(PATH,":")
        # DEBUG
        #print "os.environ['PATH']=", os.environ["PATH"]

    # if output of export list is requested, do that
    if "-o" in options:
        export_list = env_list + ["PATH", TARGET_ENV_VAR]
        for var in export_list:
            if var in os.environ:
                value = os.environ[var]
                # escape spaces
                value = re.sub(" ","\ ",value)
                print("export %s=%s" % (var, value))
        return

    # do sanity checks, or other environment setup, if configured
    # note that setenv is called every time ttc is run, so this can
    # be used as a global environment sanity check over anything
    # you probably shouldn't do something persistent here
    if "setenv_cmd" in tmap:
        exec_command(tmap, "setenv", 1)

    if "-s" in options:
        # start a new shell with the modified environment
        # FIXTHIS - add TTC to prompt
        #print "os.environ=", os.environ
        #prompt = os.environ["PS1"]
        #prompt = prompt[0] + "TTC " + prompt[1:]
        #os.environ["PS1"] = "[TTC \\u@\\h \\W]\\$ "

        # FIXTHIS - should get user's preferred shell from /etc/passwd
        print("Starting sub-shell with environment for target.")
        print("Use 'exit' to exit the sub-shell.")
        os.system("/bin/bash")

def config_val(op, config, value, line):
    if op=="y" or op=="m" or op=="1" or op=="s":
        new_val = "%s=%s\n" % (config, value)
    if op=="n":
        new_val = "# %s is not set\n" % (config)
    if op=="s+":
        #print "line=", line
        # split the line (once) on '=' and take the second part
        old_val = line.split("=", 1)[1]

        # trim the quotes
        old_str = old_val.strip()[1:-1]
        new_str = value.strip()[1:-1]

        # append the old string and new string
        new_val = '%s="%s%s"\n' % (config, old_str, new_str)
        #print "old_val=", old_val
        #print "new_val=", new_val
    return new_val


def set_config_value_in_file(cfile, op, config, value):
    tmpfile = os.environ["TMPDIR"]+"/"+os.path.basename(cfile)+".tmp"
    #print "tmpfile = ", tmpfile
    #print "cfile = ", cfile
    lines = open(cfile,"rw").readlines()
    out = open(tmpfile,"w")

    pat = "(^# |^)%s[ =]" % config
    # scan file for config
    found = 0
    for line in lines:
        if re.match(pat,line):
            # replace this line in the output
            found = 1
            new_val = config_val(op, config, value, line)
            out.write(new_val)
            continue
        out.write(line)

    if not found:
        if op=="s+":
            print("error: missing %s, cannot append value %s" % (config, value))
            sys.exit(1)
        else:
            new_val = config_val(op, config, value, line)
            out.write(new_val)

    os.unlink(cfile)
    out.close()
    # rename doesn't work across distinct file systems
    shutil.move(tmpfile, cfile)

def do_set_config(tmap, kernel_dir, kopts):
    # kopt should be a list of option specs, separated by semi-colons
    # eg. CONFIG_FOO=y CONFIG_BAR=n CONFIG_BAZ=1235 CONFIG_STR+=" quiet"
    # back up the .config file
    cfile = kernel_dir+"/.config"
    bfile = kernel_dir+"/config.target-bak"
    print("Backing up current config file to %s" % os.path.basename(bfile))
    cmd = "cp %s %s" % (cfile, bfile)
    (rcode, result) = subprocess.getstatusoutput(cmd)

    # now set the vars.
    for kopt_spec in kopts:
        print("  Setting %s" % kopt_spec)
        try:
            (config, value)=kopt_spec.split("=", 1)
        except:
            print("Invalid option specification: %s" % kopt_spec)
            continue
        # detect '+=' operation
        value = value.strip()
        op = value[0]
        if op == '"':
            op = 's'
        if config[-1]=="+":
            config = config[:-1]
            op = "s+"
        op = op.lower()
        if op>='0' and op<='9':
            op = '1'
        # check op for legal value:
        if op not in ('y','n','m','s','s+','1'):
            print("Invalid option specification: %s" % kopt_spec)
            continue
        set_config_value_in_file(cfile, op, config, value)


def split_filepath(filepath):
    # FIXTHIS - split_filepath doesn't handle ':' in file names or paths
    try:
        (tspec, path) = filepath.split(':')
    except:
        tspec = ''
        path = filepath
    return (tspec, path)

def do_copy(tmap, objects):
    # copy must be one of:
    # 1) one file from host to a target directory or file
    # 2) more than one file from host to a target directory
    # 3) one file from target to a host directory or file
    # 4) more than one file from target to a host directory

    # we don't support host-to-host copies or target-to-target copies

    # FIXTHIS - need to handle invalid number of arguments in do_copy

    # if '-r' is specified, put it in 'copy_args' for sub-command:
    if objects[0] == '-r':
        os.environ["copy_args"] = "-r"
        del(objects[0])
    else:
        os.environ["copy_args"] = " "

    # find out direction of copy from the last argument
    (tspec, path) = split_filepath(objects[-1])
    if tspec:    # we're copying *to* the target
        if tspec=="target":
            dest = path
        elif tspec=="target_bin":
            if "target_bin" in tmap:
                dest=tmap["target_bin"]+"/"+path
            else:
                dest="/usr/bin/" + path
        else:
            error_out("Invalid target '%s' specified in dest path." % tspec, 6)

        # copy each file individually
        for src in objects[:-1]:
            os.environ["src"] = src
            os.environ["dest"] = dest
            exec_command(tmap, "copy_to")

    else:    # no tspec in destination, direction is *from* target
        dest = path
        for file in objects[:-1]:
            (tspec, src) = split_filepath(file)
            if tspec != "target":
                error_out("Invalid target '%s' specified in src path." % tspec, 6)
            os.environ["src"] = src
            os.environ["dest"] = dest
            exec_command(tmap, "copy_from")
    sys.exit(0)

def do_rm(tmap, objects):
    # we support file paths either with or without the target: qualifier
    # (but they all operate on the target)

    # FIXTHIS - need to report invalid number of arguments in do_rm

    # remove each file individually
    for file in objects:
        (tspec, path) = split_filepath(objects[-1])
        dest = path
        if tspec:    # adjust path for certain tspecs
            if tspec=="target":
                pass
            elif tspec=="target_bin":
                if "target_bin" in tmap:
                    dest=tmap["target_bin"]+"/"+path
                else:
                    dest="/usr/bin/" + path
            else:
                error_out("Invalid target '%s' specified in dest path." % tspec, 6)
        os.environ["dest"] = dest
        exec_command(tmap, "rm")
        sys.exit(0)


def do_wait_for(tmap, options):
    import time

    interval = 5
    # 99999 seconds is a little over 27 hours
    timeout = 99999
    if '-i' in options:
        interval = int(options[options.index('-i')+1])
        options.remove('-i')
        options.remove(str(interval))
    if '-t' in options:
        timeout = int(options[options.index('-t')+1])
        options.remove('-t')
        options.remove(str(timeout))

    cmd = options[0]
    print('Waiting (up to %d seconds) for "%s"...' % (timeout, cmd))

    i = 0
    while i < timeout:
        rcode = os.system(cmd) >> 8
        if rcode==0:
            break
        sys.stdout.write(".")
        sys.stdout.flush()
        time.sleep(interval)
        i = i + interval
    print()
    sys.exit(rcode)

def get_reservation(tmap):
    try:
        real_board = tmap["real_board"]
    except:
        real_board = tmap["target"]
    rfile = rfile_fmt % (lockdir, real_board)
    reserved = os.path.isfile(rfile)

    if reserved:
        # reservation file exists, read it for details
        temp_targets = read_config(rfile, optional=False)
        trec = temp_targets[real_board]
        RES_USER = trec["USER"]
        start_time = trec["start_time"]

        return((RES_USER, start_time))
    else:
        return((None, None))

# check the reservation for a target board
def check_reservation(tmap, command):
    target = tmap["target"]
    res = get_reservation(tmap)

    # if there's a reservation, and it's not mine, error out
    if res[0] and not res[0]==os.environ["USER"]:
        print("Error: Can't perform command '%s'" % command)
        print("User %s currently has '%s' reserved." % \
            (res[0], target))
        print("Reservation began at: "+res[1])
        sys.exit(1)

def do_reserve(tmap, options):
    import time

    # create lock directory, if it doesn't exist
    if not os.path.isdir(lockdir):
        os.mkdir(lockdir)
        os.chmod(lockdir, 0o777)

    target = tmap["target"]
    try:
        real_board = tmap["real_board"]
    except:
        real_board = target
    USER=os.environ["USER"]
    start_time=time.strftime("%Y-%m-%d_%H:%M:%S")

    # handle -f (force) option
    force = 0
    if "-f" in options:
        force = 1

    # check for reservations file
    rfile = rfile_fmt % (lockdir, real_board)

    if not os.path.isfile(rfile) or force:
        try:
            f = open(rfile, "w")
            f.write("target=%s\n" % real_board)
            f.write("target_alias=%s\n" % target)
            f.write("USER=%s\n" % USER)
            f.write("start_time=%s\n" % start_time)
            f.write("last_ttc_time=%s\n" % start_time)
            f.close()
        except:
            error_out("Could not create reservation file %s" % rfile, 5)

        try:
            os.chmod(rfile, 0o777)
        except:
            print("Could not chmod reservation file %s" % rfile)

        # also, execute the reserve_cmd, if any
        if "reserve_cmd" in tmap:
            exec_command(tmap, "reserve")
        print("Target board '%s' is reserved for user %s" % (target, USER))
    else:
        res = get_reservation(tmap)
        if USER==res[0]:
            print("You already have '%s' reserved." % target)
        else:
            print("Error: Can't reserve '%s'" % target)
            print("User %s currently has '%s' reserved." % (res[0], target))
            print("Reservation began at: %s" % res[1])
    sys.exit(0)

def do_release(tmap, options):
    res = get_reservation(tmap)

    target = tmap["target"]
    if not res[0]:
        print("No reservation found for '%s'" % target)
        sys.exit(1)

    force = 0
    if "-f" in options:
        force = 1

    # cannot remove someone else's reservation, unless forced
    if res[0]!=os.environ["USER"] and not force:
        print("Error: Can't release reservation for '%s'" % target)
        print("User %s has the reservation." % res[0])
        print("Use 'ttc release -f' to force the release of the reservation.")
        sys.exit(1)

    try:
        real_board = tmap["real_board"]
    except:
        real_board = tmap["target"]
    rfile = rfile_fmt % (lockdir, real_board)
    try:
        os.unlink(rfile)
    except:
        print("Problem removing reservation file: %s" % rfile)
    print("Released reservation for user %s for target '%s'" % (res[0], target))


import logging, logging.handlers
logger = None
def do_log_init():
    global logger
    if os.path.exists("/dev/log"):
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)
        handler = logging.handlers.SysLogHandler('/dev/log')
        logger.addHandler(handler)
    else:
        print("ERROR: missing /dev/log - no logging performed")

    # FIXTHIS - could support file logging as well, here
    # should check TTC_SYSLOG, and use filename from that
    # maybe rename it to TTC_LOG instead (see LOG_ENV_VAR)

# overall, this information is pretty dang useless
def do_log(command, tmap, options):
    if logger:
        target = tmap["target"]
        logger.debug('ttc %s %s' % (target, command))

def main():
    global verbose
    global quiet
    global use_statusoutput

    if len(sys.argv)<2:
        error_out('Missing command\nUse "ttc help" to get usage help.', 1)

    # do logging to syslog, if user sets the logging environment variable
    if LOG_ENV_VAR in os.environ:
        do_log_init()

    # read target information file for this host
    targets = read_config(system_config_dir + "/" + CONFIG_FILE)

    # merge info from user config, if present
    user_conf = user_config_dir + "/" + CONFIG_FILE
    if os.path.exists(user_conf):
        user_targets = read_config(user_conf)
        for tname in list(user_targets.keys()):
            tmap = user_targets[tname]
            # for bookkeeping, record the user file where
            # this info came from
            tmap["user_conf"] = user_conf
            if tname in targets:
                # if already present, merge the local info
                targets[tname].update(tmap)
            else:
                # else just add the local info
                targets[tname] = tmap

    # merge info from local config, if specified
    if LOCAL_CONF_ENV_VAR in os.environ:
        local_conf = os.environ[LOCAL_CONF_ENV_VAR]
        local_conf_list = local_conf.split(":")
        for local_conf in local_conf_list:
            local_targets = read_config(local_conf, optional=False)
            for tname in list(local_targets.keys()):
                tmap = local_targets[tname]
                # for bookkeeping, record the local file where
                # this info came from
                tmap["local_conf"] = local_conf
                if tname in targets:
                    # if already present, merge the local info
                    targets[tname].update(tmap)
                else:
                    # else just add the local info
                    targets[tname] = tmap

    target_list = list(targets.keys())
    target_alias = {}
    for tname in target_list:
        if "target_alias" in targets[tname]:
            talias = targets[tname]["target_alias"]
            target_alias[talias] = tname

    if not targets:
        error_out("No valid targets were specified in any config file.\nHere is help on valid config files and locations:\n\n%s" % command_help["vars"][1], 1)

    # perform inheritance, if specified
    # example of simple inheritance:
    # target=osk-ccache
    # inherit_from=osk
    # CROSS_COMPILE=ccache arm-sony-linux-gnueabi-
    #

    # do this multiple times, to catch nested inherit_froms
    # keep going until no changes are made in any attributes
    # (this implements a transitive closure)
    attribute_added=1
    while attribute_added:
        attribute_added = 0
        for tname in target_list:
            if "inherit_from" in targets[tname]:
                class_key_list = targets[tname]["inherit_from"]
                for class_key in class_key_list.split(","):
                    try:
                        class_attrs = targets[class_key.strip()]
                    except:
                        print("Error in config: missing config for %s specified in inherit_from attribute of target %s" % (class_key.strip(), tname))
                this_keys = list(targets[tname].keys())
                for key, attr in list(class_attrs.items()):
                    if key not in this_keys:
                        targets[tname][key] = attr
                        attribute_added=1

    # parse arguments
    command_list = ["list", "info", "help", "--help", "-h", "version",
    	"console", "login", "status", "setenv", "kinstall",
    	"kbuild", "mbuild", "minstall",
    	"on", "off", "pos", "reset","reboot", "get_kernel", "get_config",
    	"set_config", "cp", "rm", "wait_for", "fsbuild",
    	"fsinstall", "run", "vars", "reserve", "release"]
    nontarget_commands = ["list", "help", "--help", "-h", "version", "vars"]
    board_mod_commands = ["console", "login", "kinstall", "minstall",
    	"on", "off", "reset", "reboot", "cp", "rm", "fsinstall", "run"]
    options = []

    target = ""
    command = ""
    quiet = 0
    verbose = 0
    use_statusoutput = 0
    # find command, target, and any arguments
    for i in range(1,len(sys.argv)):
        arg = sys.argv[i]
        if arg=="-q":
            quiet = 1
            continue
        if arg=="-v":
            verbose = 1
            continue
        if arg=="-c":
            use_statusoutput = 1
            continue
        if arg == "run":
            # stop processing arguments
            # so you can do: 'ttc run help' or 'ttc run reboot'
            # or 'ttc run command -h'
            command = "run"
            options = sys.argv[i+1:]
            break
        if arg in command_list:
            # support "ttc <command> help"
            if (arg=="help" or arg=="-h" or arg=="--help") and command:
                options.append(command)
                command = arg
                continue

            # support "ttc help <command>" and "ttc run reboot"
            # -- where arg has same name as a legal ttc command
            if command:
                # this is an argument to the command
                # which was already found
                # note: check for 'help' arg (above) must come first
                options.append(arg)
            else:
                # normal "ttc <command>" case

                command = arg
            continue
        if arg in target_list:
            target = arg
            if verbose:
                print("Using target:", target)
            continue
        if arg in list(target_alias.keys()):
            target = target_alias[arg]
            continue

        options.append(arg)

    if command=="help" or command=="--help" or command=="-h":
        usage(0, options)

    if command=="vars":
        options.append(command)
        usage(0, options)

    if command=="version":
        print("ttc: version %d.%d.%d" % VERSION)
        sys.exit(0)

    if command=="list":
        do_list(targets)

    # if no command recognized, return
    if not command:
        error_out('Missing or unregonized command\nUse "ttc help" to get usage help.', 1)

    # if command requires a target, but one was not specified,
    # try to get it from the environment
    if not target and command not in nontarget_commands:
        try:
            target = os.environ[TARGET_ENV_VAR]
            # check if target is OK
            if target not in targets:
                error_out("Unknown target %s (specified by environment var. %s)" % (target, TARGET_ENV_VAR), 2)
        except:
            error_out('Missing target for command "%s"\nUse "ttc help" to get usage help.' % command, 2)

    tmap = targets[target]

    # ex: target=my_board
    # copy_to_cmd=cp $src /target/%(foo)s/$dest
    # note difference between internally expanded macros %(var)s, and
    # externally expanded shell environment variables $var

    def expand_macros(str, d):
        new_str = str
        cpat=re.compile(r"%[(]\w*?[)]s")
        m = cpat.search(new_str)
        max_subs = 20
        i = 0
        while m and i<max_subs:
            part1 = new_str[:m.start()]
            macro = new_str[m.start():m.end()]
            part2 = new_str[m.end():]
            try:
                value = macro % d
            except:
                value = "<unknown>"
                print_error("missing value for named macro '%s'" % macro)
            new_str = part1+value+part2
            m = cpat.search(new_str)
            i += 1
        return new_str

    # read BUILDDIR from environment before macro expansion
    if "BUILDDIR" in os.environ:
        tmap["BUILDDIR"] = os.environ["BUILDDIR"]

    # expand macros
    for name,value in list(tmap.items()):
        tmap[name] = expand_macros(value, tmap)

        # export some special environment variables
        if "SSHPASS" in tmap:
            os.environ["SSHPASS"] = tmap["SSHPASS"]

    # log if env 'TTC_LOG' is set.
    do_log(command, tmap, options)

    # all non-target commands have been handled
    if command in board_mod_commands:
        check_reservation(tmap, command)

    # do local environment setup
    do_setenv(tmap)

    # process the command
    if command=="info":
        do_info(tmap, options)

    if command=="status":
        do_status(tmap)

    if command=="reserve":
        do_reserve(tmap, options)

    if command=="release":
        do_release(tmap, options)

    if command in ["kinstall", "minstall", "reset", "reboot", "fsinstall", \
        "kbuild", "mbuild", "on", "off", "pos", "fsbuild"]:
        exec_command(tmap, command)
        if (command=="reset" or command=="reboot") and \
            ("-w" in options):
            import time
            try:
                reset_delay = int(tmap["reset_delay"])
            except:
                reset_delay = 30
            print("Waiting %d seconds for target board to reset..." % reset_delay)
            time.sleep(reset_delay)
        sys.exit(0)

    if command=="console" or command=="login":
        exec_command(tmap, command, 1)
        sys.exit(0)

    if command=="setenv":
        # if user is not outputing an export list, user gets a sub-shell
        if "-o" not in options:
            options.append("-s")
        do_setenv(tmap, options)

    if command=="get_kernel":
        # set directory to output kernel to (or place config in)
        if "-o" in options:
            # override the KERNEL_SRC directory in the environment
            # FIXTHIS - this arg parsing is not robust
            outdir = options[options.index("-o")+1]
            os.environ["KERNEL_SRC"] = outdir

        exec_command(tmap, command)
        sys.exit(0)

    if command=="run":
        do_run(tmap, options)
        # this does not return
        sys.exit(0)

    if command=="get_config":
        # set directory to output kernel to (or place config in)
        if "-o" in options:
            # override the KBUILD_OUTPUT directory in the environment
            # FIXTHIS - this arg parsing is not robust
            outdir = options[options.index("-o")+1]
            os.environ["KBUILD_OUTPUT"] = outdir

        # create the build output directory, if it does not exist
        if "KBUILD_OUTPUT" in os.environ:
            outdir = os.environ["KBUILD_OUTPUT"]
            if not os.path.exists(outdir):
                print("Warning: missing build output directory '%s'" % outdir)
                sys.stdout.write("Trying to create it now...")
                cmd = "install -d %s" % outdir
                (rcode, result) = subprocess.getstatusoutput(cmd)
                if rcode:
                    print()
                    print("Error: Could not create build output directory '%s'" % outdir)
                    print("Result='%s'" % result)
                else:
                    print("OK")

        exec_command(tmap, command)
        sys.exit(0)

    if command=="set_config":
        # set an individual kernel config
        # first, set directory where .config is found
        outdir = "."
        # FIXTHIS - KERNEL_SRC only works if cwd is "up one"
        #if os.environ.has_key("KERNEL_SRC"):
        #    outdir = os.environ["KERNEL_SRC"]
        if "KBUILD_OUTPUT" in os.environ:
            outdir = os.environ["KBUILD_OUTPUT"]
        if "-o" in options:
            # override the KBUILD_OUTPUT directory in the environment
            # FIXTHIS - this arg parsing is not robust
            outdir = options[options.index("-o")+1]

        do_set_config(tmap, outdir, options)

    if command=="cp":
        do_copy(tmap, options)

    if command=="rm":
        do_rm(tmap, options)

    if command=="wait_for":
        do_wait_for(tmap, options)


if __name__=="__main__":
    main()
