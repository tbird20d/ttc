#!/usr/bin/python
#
# ssh_exec - run a command on another machine via ssh
#
# This command requires the python module pexpect.py
# which is not in the default python distribution.
# You can get it from: http://pexpect.sourceforge.net/
#
# Copyright 2006 Sony Corporation
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of version 2 of the GNU General Public License as
#   published by the Free Software Foundation.  The GNU General Public
#   License is available online at: http://www.gnu.org/copyleft/gpl.html
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
# Author: Tim Bird  <tim.bird (at) am.sony.com>

import sys
import pexpect

# These are defaults
# Normally, get host, user, password and command from command line
host = "osk2"
user = "root"
password = ""
cmd = "dmesg"

def usage():
	print """Usage: ssh_exec <options>

Options:
-t <host>	Specify the host to ssh to
-u <user>	Specify the user name to login with
-p <password>	Specify the password to use to login
-c <command>	Specify the command to execute on the remote machine
-v              Be verbose
"""
	sys.exit(0)

def vprint(msg):
	if verbose:
		print msg

def dprint(msg):
	if debug:
		print msg

def rprint(result):
	dprint("result='%s'" % result)

# ssh_command() was taken directly from the sshls.py example in
# pexpect-2.1
def ssh_command (user, host, password, command):
    """This runs a command on the remote host. This returns a
    pexpect.spawn object. This handles the case when you try
    to connect to a new host and ssh asks you if you want to
    accept the public key fingerprint and continue connecting.
    """
    ssh_newkey = 'Are you sure you want to continue connecting'
    child = pexpect.spawn('ssh -o "StrictHostKeyChecking no" -l %s %s %s'%(user, host, command))
    i = child.expect([pexpect.TIMEOUT, ssh_newkey, 'password: '])
    if i == 0: # Timeout
        print 'ERROR!'
        print 'SSH could not login. Here is what SSH said:'
        print child.before, child.after
        return None
    if i == 1: # SSH does not have the public key. Just accept it.
        child.sendline ('yes')
        child.expect ('password: ')
        i = child.expect([pexpect.TIMEOUT, 'password: '])
        if i == 0: # Timeout
            print 'ERROR!'
            print 'SSH could not login. Here is what SSH said:'
            print child.before, child.after
            return None       
    child.sendline(password)
    return child

verbose = 0
debug = 0
for arg in sys.argv:
	if arg=="-h":
		usage()
	if arg=="-t":
		host = sys.argv[sys.argv.index(arg)+1]
	if arg=="-u":
		user = sys.argv[sys.argv.index(arg)+1]
	if arg=="-p":
		password = sys.argv[sys.argv.index(arg)+1]
	if arg=="-v":
		verbose = 1
	if arg=="-c":
		cmd = sys.argv[sys.argv.index(arg)+1]
	if arg=="--debug":
		debug = 1

if not cmd:
	print "No command specified."
	usage()

vprint('Executing "%s" as user %s on host %s' % (cmd, user, host))

child = ssh_command (user, host, password, cmd)
child.expect(pexpect.EOF)
output = child.before

# remove an explicable leading blank line
output = '\n'.join(output.split('\n')[1:])

print output
